{"version":3,"sources":["webpack:///./src/components/Author.js","webpack:///./src/templates/blog-post.js","webpack:///./src/components/Tag.js","webpack:///./src/components/PostMetadata.js"],"names":["Author","_ref","author","date","react_default","a","createElement","className","gatsby_image_default","fixed","image","childImageSharp","name","Template","post","data","markdownRemark","layout","seo","title","frontmatter","description","blurb","thumbnail","cover_image","components_Author","authors","tags","map","tag","key","Tag","dangerouslySetInnerHTML","__html","html","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_2__","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_2___default","to","kebabCase","_Tag__WEBPACK_IMPORTED_MODULE_1__","PostMetadata","_ref$stacked","stacked"],"mappings":"yLAkBeA,EAdA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAQC,EAAXF,EAAWE,KAAX,OACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAKI,MAAOP,EAAOQ,MAAMC,gBAAgBF,SAE3CL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,cACGJ,EAAOU,MACDR,EAAAC,EAAAC,cAAA,WACRH,cCFQ,SAASU,EAATZ,GAEZ,IACuBa,EADvBb,EADDc,KAEQC,eACR,OACEZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,MAAK,GAAKL,EAAKM,YAAYD,MAC3BE,YAAaP,EAAKM,YAAYE,MAC9BC,UAAWT,EAAKM,YAAYI,YAAYb,gBAAgBF,QAE1DL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,IAAIO,EAAKM,YAAYD,QAGrCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACmB,EAAD,CAAQvB,OAAQY,EAAKM,YAAYM,QAAQ,GAAIvB,KAAMW,EAAKM,YAAYjB,OACpEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0CAAd,cACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAS,oCACZO,EAAKM,YAAYO,KAAKC,IAAK,SAAAC,GAAG,OAC7BzB,EAAAC,EAAAC,cAAA,MAAIwB,IAAKD,GACPzB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAKF,IAAKA,SAKhBzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASO,EAAKM,YAAYE,OAEvClB,EAAAC,EAAAC,cAAA,OACEC,UAAU,oBACVyB,wBAAyB,CAAEC,OAAQnB,EAAKoB,0FAU/C,IAAMC,EAAS,+CCtDtB,IAAAC,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAA,KAAAK,EAAAL,EAAAE,EAAAE,GAUeV,IANH,SAAA9B,GAAA,IAAG4B,EAAH5B,EAAG4B,IAAH,OACVS,EAAAjC,EAAAC,cAACkC,EAAA,KAAD,CAAMjC,UAAU,oCAAoCoC,GAAE,SAAWC,IAAUf,IACxEA,sCCNL,IAAAO,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAS,EAAAR,EAAA,KAeeS,IAXM,SAAA7C,GAAA,IAAGa,EAAHb,EAAGa,KAAHiC,EAAA9C,EAAS+C,eAAT,IAAAD,KAAA,OACnBT,EAAAjC,EAAAC,cAAA,MAAIC,UAAS,uBAAwByC,EAAU,gBAAkB,gBAC/DV,EAAAjC,EAAAC,cAAA,UAAKQ,EAAKM,YAAYjB,MACrBW,EAAKM,YAAYO,KAAKC,IAAK,SAAAC,GAAG,OAC7BS,EAAAjC,EAAAC,cAAA,MAAIwB,IAAKD,GACPS,EAAAjC,EAAAC,cAACuC,EAAA,EAAD,CAAKhB,IAAKA","file":"component---src-templates-blog-post-js-105908648d7d5c0b8511.js","sourcesContent":["import React from \"react\"\nimport Img from 'gatsby-image'\n\n\nconst Author = ({ author, date }) => (\n  <div className=\"media\">\n    <div className=\"media__image avatar\">\n      <Img fixed={author.image.childImageSharp.fixed} />\n    </div>\n    <div className=\"media__body small\">\n      <strong>\n        {author.name}\n      </strong><br />\n      {date}\n    </div>\n  </div>\n);\n\nexport default Author;\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\n\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport PostMetadata from '../components/PostMetadata'\nimport Author from '../components/Author'\nimport Tag from '../components/Tag'\n\n\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query we'll write in a bit\n}) {\n  const { markdownRemark: post } = data // data.markdownRemark holds our post data\n  return (\n    <Layout>\n      <SEO \n        title={`${post.frontmatter.title}`} \n        description={post.frontmatter.blurb} \n        thumbnail={post.frontmatter.cover_image.childImageSharp.fixed} \n      />\n      <div className=\"container\">\n        <div className=\"section-top\">\n          <h1 className=\"\">{post.frontmatter.title}</h1>\n        </div>\n\n        <div className=\"split section-small\">\n          <div className=\"sidebar\">\n            <Author author={post.frontmatter.authors[0]} date={post.frontmatter.date} />\n            <h6 className=\"keyline--top theme-border space--tight\">Post tags:</h6>\n            <ul className={`small font-primary list-unstyled`}>\n            {post.frontmatter.tags.map((tag => (\n              <li key={tag}>\n                <Tag tag={tag} />\n              </li>\n            )))}\n            </ul>\n          </div>\n          <div className=\"article theme--light\">\n            <p className=\"intro\">{post.frontmatter.blurb}</p>\n            {/* <Img fluid={post.frontmatter.cover_image.childImageSharp.fluid}></Img> */}\n            <div\n              className=\"blog-post-content\"\n              dangerouslySetInnerHTML={{ __html: post.html }}\n            />\n          </div>\n        </div>\n        \n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostByPath($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        blurb\n        tags\n        cover_image {\n          childImageSharp{\n            fluid(maxWidth: 880) {\n              ...GatsbyImageSharpFluid\n            }\n            fixed(width: 500, height: 500) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n          \n        }\n        authors {\n          id\n          name\n          image {\n            childImageSharp {\n              fixed(width: 40, height: 40) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n        }\n      }\n    }\n  }`;\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport kebabCase from 'lodash/kebabCase';\n\nconst Tag = ({ tag }) => (\n  <Link className=\"theme-link theme-border-link pill\" to={`/tags/${kebabCase(tag)}`}>\n    {tag}\n  </Link>\n);\n\nexport default Tag;\n","import React from 'react'\nimport Tag from './Tag';\n\n\nconst PostMetadata = ({ post, stacked = false }) => (\n  <ul className={`small font-primary ${stacked ? 'list-unstyled' : 'list-inline'}`}>\n    <li>{post.frontmatter.date}</li>\n    {post.frontmatter.tags.map((tag => (\n      <li key={tag}>\n        <Tag tag={tag} />\n      </li>\n    )))}\n  </ul>\n);\n    \nexport default PostMetadata;\n"],"sourceRoot":""}