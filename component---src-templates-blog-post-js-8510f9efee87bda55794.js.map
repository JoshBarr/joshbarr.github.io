{"version":3,"sources":["webpack:///./src/components/Author.js","webpack:///./src/templates/blog-post.js","webpack:///./src/components/Tag.js","webpack:///./src/components/PostMetadata.js"],"names":["Author","_ref","author","date","react_default","a","createElement","className","gatsby_image_default","fixed","image","childImageSharp","name","Template","data","post","markdownRemark","console","log","layout","seo","title","frontmatter","components_Author","authors","tags","map","tag","key","Tag","blurb","dangerouslySetInnerHTML","__html","html","__webpack_require__","d","__webpack_exports__","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_2__","lodash_kebabCase__WEBPACK_IMPORTED_MODULE_2___default","to","kebabCase","_Tag__WEBPACK_IMPORTED_MODULE_1__","PostMetadata","_ref$stacked","stacked"],"mappings":"yLAkBeA,EAdA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAQC,EAAXF,EAAWE,KAAX,OACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAKI,MAAOP,EAAOQ,MAAMC,gBAAgBF,SAE3CL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,cACGJ,EAAOU,MACDR,EAAAC,EAAAC,cAAA,WACRH,cCFQ,SAASU,EAATZ,GAEZ,IADDa,EACCb,EADDa,KAEwBC,EAASD,EAAzBE,eAER,OADAC,QAAQC,IAAIJ,GAEVV,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAKC,MAAK,GAAKN,EAAKO,YAAYD,QAChCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,IAAIQ,EAAKO,YAAYD,QAGrCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACiB,EAAD,CAAQrB,OAAQa,EAAKO,YAAYE,QAAQ,GAAIrB,KAAMY,EAAKO,YAAYnB,OACpEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0CAAd,cACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAS,oCACZQ,EAAKO,YAAYG,KAAKC,IAAK,SAAAC,GAAG,OAC7BvB,EAAAC,EAAAC,cAAA,MAAIsB,IAAKD,GACPvB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAKF,IAAKA,SAKhBvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASQ,EAAKO,YAAYQ,OAEvC1B,EAAAC,EAAAC,cAAA,OACEC,UAAU,oBACVwB,wBAAyB,CAAEC,OAAQjB,EAAKkB,YAzCtDC,EAAAC,EAAAC,EAAA,4BAAAvB,IAAAqB,EAAAC,EAAAC,EAAA,8BAAAC,IAmDO,IAAMA,EAAS,+CCnDtB,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,KAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAAM,EAAAE,GAUeb,IANH,SAAA5B,GAAA,IAAG0B,EAAH1B,EAAG0B,IAAH,OACVY,EAAAlC,EAAAC,cAACmC,EAAA,KAAD,CAAMlC,UAAU,oCAAoCqC,GAAE,SAAWC,IAAUlB,IACxEA,sCCNL,IAAAW,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAQ,EAAAZ,EAAA,KAeea,IAXM,SAAA9C,GAAA,IAAGc,EAAHd,EAAGc,KAAHiC,EAAA/C,EAASgD,eAAT,IAAAD,KAAA,OACnBT,EAAAlC,EAAAC,cAAA,MAAIC,UAAS,uBAAwB0C,EAAU,gBAAkB,gBAC/DV,EAAAlC,EAAAC,cAAA,UAAKS,EAAKO,YAAYnB,MACrBY,EAAKO,YAAYG,KAAKC,IAAK,SAAAC,GAAG,OAC7BY,EAAAlC,EAAAC,cAAA,MAAIsB,IAAKD,GACPY,EAAAlC,EAAAC,cAACwC,EAAA,EAAD,CAAKnB,IAAKA","file":"component---src-templates-blog-post-js-8510f9efee87bda55794.js","sourcesContent":["import React from \"react\"\nimport Img from 'gatsby-image'\n\n\nconst Author = ({ author, date }) => (\n  <div className=\"media\">\n    <div className=\"media__image avatar\">\n      <Img fixed={author.image.childImageSharp.fixed} />\n    </div>\n    <div className=\"media__body small\">\n      <strong>\n        {author.name}\n      </strong><br />\n      {date}\n    </div>\n  </div>\n);\n\nexport default Author;\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\n\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport PostMetadata from '../components/PostMetadata'\nimport Author from '../components/Author'\nimport Tag from '../components/Tag'\n\n\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query we'll write in a bit\n}) {\n  const { markdownRemark: post } = data // data.markdownRemark holds our post data\n  console.log(data);\n  return (\n    <Layout>\n      <SEO title={`${post.frontmatter.title}`} />\n      <div className=\"container\">\n        <div className=\"section-top\">\n          <h1 className=\"\">{post.frontmatter.title}</h1>\n        </div>\n\n        <div className=\"split section-small\">\n          <div className=\"sidebar\">\n            <Author author={post.frontmatter.authors[0]} date={post.frontmatter.date} />\n            <h6 className=\"keyline--top theme-border space--tight\">Post tags:</h6>\n            <ul className={`small font-primary list-unstyled`}>\n            {post.frontmatter.tags.map((tag => (\n              <li key={tag}>\n                <Tag tag={tag} />\n              </li>\n            )))}\n            </ul>\n          </div>\n          <div className=\"article theme--light\">\n            <p className=\"intro\">{post.frontmatter.blurb}</p>\n            {/* <Img fluid={post.frontmatter.cover_image.childImageSharp.fluid}></Img> */}\n            <div\n              className=\"blog-post-content\"\n              dangerouslySetInnerHTML={{ __html: post.html }}\n            />\n          </div>\n        </div>\n        \n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostByPath($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        blurb\n        tags\n        cover_image {\n          childImageSharp{\n            fluid(maxWidth: 880) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        authors {\n          id\n          name\n          image {\n            childImageSharp {\n              fixed(width: 40, height: 40) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n        }\n      }\n    }\n  }`;\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport kebabCase from 'lodash/kebabCase';\n\nconst Tag = ({ tag }) => (\n  <Link className=\"theme-link theme-border-link pill\" to={`/tags/${kebabCase(tag)}`}>\n    {tag}\n  </Link>\n);\n\nexport default Tag;\n","import React from 'react'\nimport Tag from './Tag';\n\n\nconst PostMetadata = ({ post, stacked = false }) => (\n  <ul className={`small font-primary ${stacked ? 'list-unstyled' : 'list-inline'}`}>\n    <li>{post.frontmatter.date}</li>\n    {post.frontmatter.tags.map((tag => (\n      <li key={tag}>\n        <Tag tag={tag} />\n      </li>\n    )))}\n  </ul>\n);\n    \nexport default PostMetadata;\n"],"sourceRoot":""}